openapi: 3.0.0
info:
  title: API Documentation
  description: This is the API documentation for the project.
  version: 1.0.0
servers:
  - url: http://localhost:3001/api
    description: Local server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: ["user", "admin"]
    UserInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: ["user", "admin"]
      required:
        - name
        - email
        - password
        - role
    Teammate:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        profession:
          type: string
        socialMedia:
          type: object
          properties:
            twitter:
              type: string
            linkedin:
              type: string
            facebook:
              type: string
            instagram:
              type: string
        imageUrl:
          type: string
    TeammateInput:
      type: object
      properties:
        name:
          type: string
        profession:
          type: string
        socialMedia:
          type: object
          properties:
            twitter:
              type: string
            linkedin:
              type: string
            facebook:
              type: string
            instagram:
              type: string
        image:
          type: string
          format: binary
      required:
        - name
        - profession
      Contact:
      type: object
      properties:
        id:
          type: integer
        email1:
          type: string
        email2:
          type: string
        phone1:
          type: string
        phone2:
          type: string
        location:
          type: string
        instagram:
          type: string
        linkedin:
          type: string
        twitter:
          type: string
        facebook:
          type: string
    ContactInput:
      type: object
      properties:
        email1:
          type: string
        email2:
          type: string
        phone1:
          type: string
        phone2:
          type: string
        location:
          type: string
        instagram:
          type: string
        linkedin:
          type: string
        twitter:
          type: string
        facebook:
          type: string
      required:
        - email1
        - phone1
        - location
    ContactUs:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        subject:
          type: string
        message:
          type: string
    ContactUsInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        subject:
          type: string
        message:
          type: string
      required:
        - name
        - email
        - subject
        - message
    Project:
      type: object
      properties:
        id:
          type: integer
        date_started:
          type: string
          format: date-time
        name:
          type: string
        location:
          type: string
        description:
          type: string
        image_url1:
          type: string
        image_url2:
          type: string
        image_url3:
          type: string
    ProjectInput:
      type: object
      properties:
        date_started:
          type: string
          format: date-time
        name:
          type: string
        location:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string
            format: binary
      required:
        - name
        - description
        - location
    Review:
      type: object
      properties:
        id:
          type: integer
        review:
          type: string
        name:
          type: string
        position:
          type: string
    ReviewInput:
      type: object
      properties:
        review:
          type: string
        name:
          type: string
        position:
          type: string
      required:
        - review
        - name
        - position
    Content:
      type: object
      properties:
        id:
          type: integer
        whoWeAre:
          type: string
        whatWeDo:
          type: string
        projectsCount:
          type: integer
        beneficiariesCount:
          type: integer
        volunteersCount:
          type: integer
        vision:
          type: string
        mission:
          type: string
    ContentInput:
      type: object
      properties:
        whoWeAre:
          type: string
        whatWeDo:
          type: string
        projectsCount:
          type: integer
        beneficiariesCount:
          type: integer
        volunteersCount:
          type: integer
        vision:
          type: string
        mission:
          type: string
      required:
        - whoWeAre
        - whatWeDo
        - projectsCount
        - beneficiariesCount
        - volunteersCount
        - vision
        - mission
    LoginInput:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "password123"
      required:
        - email
        - password
    RefreshTokenInput:
      type: object
      properties:
        refreshToken:
          type: string
          example: "your-refresh-token"
      required:
        - refreshToken
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "your-jwt-access-token"
        refreshToken:
          type: string
          example: "your-new-refresh-token"
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "John Doe"
            email:
              type: string
              example: "john.doe@example.com"
            role:
              type: string
              example: "user"
paths:
  /user:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - Users
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: The created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A user object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    put:
      tags:
        - Users
      summary: Update a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "200":
          description: Updated user object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      tags:
        - Users
      summary: Delete a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User deleted
  /teammates:
    get:
      tags:
        - Teammates
      summary: Get all teammates
      responses:
        "200":
          description: A list of teammates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Teammate"
    post:
      tags:
        - Teammates
      summary: Create a new teammate
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TeammateInput"
      responses:
        "201":
          description: The created teammate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teammate"
  /teammates/{id}:
    get:
      tags:
        - Teammates
      summary: Get a teammate by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A teammate object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teammate"
        "404":
          description: Teammate not found
    put:
      tags:
        - Teammates
      summary: Update a teammate by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TeammateInput"
      responses:
        "200":
          description: Updated teammate object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teammate"
    delete:
      tags:
        - Teammates
      summary: Delete a teammate by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Teammate deleted
  /contact:
    get:
      tags:
        - Contact
      summary: Get contact information
      responses:
        "200":
          description: Contact information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
    post:
      tags:
        - Contact
      summary: Create new contact information
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactInput"
      responses:
        "201":
          description: Created contact information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
    put:
      tags:
        - Contact
      summary: Update contact information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactInput"
      responses:
        "200":
          description: Updated contact information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
  /contact/contact-us:
    get:
      tags:
        - Contact Us
      summary: Get all contact form submissions
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of contact form submissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContactUs"
    post:
      tags:
        - Contact Us
      summary: Submit a new contact form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactUsInput"
      responses:
        "201":
          description: Created contact form submission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactUs"
  /projects:
    get:
      tags:
        - Projects
      summary: Get all projects
      responses:
        "200":
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
    post:
      tags:
        - Projects
      summary: Create a new project
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ProjectInput"
      responses:
        "201":
          description: The created project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
  /projects/{id}:
    get:
      tags:
        - Projects
      summary: Get a project by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A project object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "404":
          description: Project not found
    put:
      tags:
        - Projects
      summary: Update a project by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ProjectInput"
      responses:
        "200":
          description: Updated project object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
    delete:
      tags:
        - Projects
      summary: Delete a project by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Project deleted
  /reviews:
    get:
      tags:
        - Reviews
      summary: Get all reviews
      responses:
        "200":
          description: A list of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
    post:
      tags:
        - Reviews
      summary: Create a new review
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewInput"
      responses:
        "201":
          description: The created review
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
  /reviews/{id}:
    get:
      tags:
        - Reviews
      summary: Get a review by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A review object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "404":
          description: Review not found
    put:
      tags:
        - Reviews
      summary: Update a review by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewInput"
      responses:
        "200":
          description: Updated review object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
    delete:
      tags:
        - Reviews
      summary: Delete a review by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Review deleted
  /content:
    post:
      tags:
        - Content
      summary: Create new content
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentInput"
      responses:
        "201":
          description: The created content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
  /content/{id}:
    get:
      tags:
        - Content
      summary: Get content by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A content object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
        "404":
          description: Content not found
    put:
      tags:
        - Content
      summary: Update content by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentInput"
      responses:
        "200":
          description: Updated content object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "200":
          description: User login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials
  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh authentication token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenInput"
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid or expired refresh token
tags:
  - name: Users
    description: Operations related to users
  - name: Teammates
    description: Operations related to teammates
  - name: Contact
    description: Operations related to the company's contacts  
  - name: Contact Us
    description: Operations related to  Contact us
  - name: Projects
    description: Operations related to  Projects
  - name: Reviews
    description: Operations related to  Reviews
  - name: Content
    description: Operations related to  Content